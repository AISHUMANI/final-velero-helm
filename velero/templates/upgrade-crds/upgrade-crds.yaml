{{- if .Values.upgradeCRDs }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "velero.fullname" . }}-upgrade-crds
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: {{ include "velero.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "velero.chart" . }}
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "velero.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "velero.serverServiceAccount" . }}-upgrade-crds
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      initContainers:
        - name: kubectl
          image: "{{ .Values.kubectl.image.repository }}:{{ .Values.kubectl.image.tag | default "1.27.3" }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh"]
          args: ["-c", "cp $(which sh) /tmp && cp $(which kubectl) /tmp"]
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - mountPath: /tmp
              name: crds
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            runAsNonRoot: true
            runAsUser: 1000
      containers:
        - name: velero
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default "v1.12.2" }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/tmp/sh"]
          args:
            - -c
            - "/velero install --crds-only --dry-run -o yaml | /tmp/kubectl apply -f -"
          resources:
            requests:
              cpu: 500m
              memory: 128Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: crds
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            runAsNonRoot: true
            runAsUser: 1000
      volumes:
        - name: crds
          emptyDir: {}
      restartPolicy: OnFailure
{{- end }}
